wells_long =plyr::rename(wells_long, c("SampleDate"="ActivityStartDate"))
wells_long$ParameterName="Gelman"
wells_long$Bore = wells_long$MonitoringLocationIdentifier
wells_long$ActivityStartDate=as.Date(wells_long$ActivityStartDate,format='%Y-%m-%d')
wells_long$ActivityIdentifier =  paste(wells_long$MonitoringLocationIdentifier, wells_long$ActivityStartDate, sep="_")
View(wells_long)
runApp('app2.r')
runApp()
runApp('app2.r')
View(wells)
runApp('app2.r')
runApp()
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp()
runApp('app2.r')
runApp('app2.r')
# Extract site locations
prof_sites=unique(assessed_profs$profile_asmnts_mlid_param[,c("ASSESS_ID","AU_NAME","R317Descrp","BEN_CLASS","IR_MLID","IR_MLNAME","IR_Lat","IR_Long")])
prof_sites$MonitoringLocationTypeName="Lake/Reservoir"
prof_sites=plyr::rename(prof_sites, c("IR_Lat"="LatitudeMeasure", "IR_Long"="LongitudeMeasure","IR_MLID"="MonitoringLocationIdentifier","IR_MLNAME"="MonitoringLocationName"))
View(prof_sites)
View(wells)
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp()
runApp()
runApp('app2.r')
runApp('app2.r')
View(wells_mlid_param_asmnts)
runApp('app2.r')
runApp()
runApp('app2.r')
runApp('app2.r')
gelman_data = read_excel("./data/well_data.xlsx")
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
wells_mlid_param_asmnts$ParameterName="Gelman"
print(typeof(wells_mlid_param_asmnts[row_click,"IR_MLID"]))
gelman_data = read_excel("./data/well_data.xlsx")
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
wells_mlid_param_asmnts$ParameterName="Gelman"
print(typeof(wells_mlid_param_asmnts[7,"IR_MLID"]))
save(wells_mlid_param_asmnts, file = "mlid.rdata")
load("mlid.rdata")
mlid_param_asmnts=mlid
load("~/WorkSpace/shiny-gallery/lake-profile-dashboard/mlid.rdata")
mlid_param_asmnts=mlid
mlid_param_asmnts=mlid$wells_mlid_param_asmnts
mlid_param_asmnts=wells_mlid_param_asmnts
print(typeof(mlid_param_asmnts[7,"IR_MLID"]))
load("mlid.rdata")
mlid_param_asmnts=wells_mlid_param_asmnts
print(typeof(mlid_param_asmnts[7,"IR_MLID"]))
View(wells_mlid_param_asmnts)
load("./data/assessed_profs.rdata")
mlid_param_asmnts=assessed_profs$profile_asmnts_mlid_param
mlid_param_asmnts=mlid_param_asmnts[,!names(mlid_param_asmnts) %in% c("IR_Lat","IR_Long","BEN_CLASS","R317Descrp","IR_MLNAME","ASSESS_ID")]
names(mlid_param_asmnts)[names(mlid_param_asmnts)=='IR_Cat']='prelim_asmnt'
gelman_data = read_excel("./data/well_data.xlsx")
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="irid"))
wells_mlid_param_asmnts$ParameterName="Gelman"
save(wells_mlid_param_asmnts, file = "mlid.rdata")
print(typeof(wells_mlid_param_asmnts[7,"irid"]))
load("./data/assessed_profs.rdata")
mlid_param_asmnts=assessed_profs$profile_asmnts_mlid_param
mlid_param_asmnts=mlid_param_asmnts[,!names(mlid_param_asmnts) %in% c("IR_Lat","IR_Long","BEN_CLASS","R317Descrp","IR_MLNAME","ASSESS_ID")]
names(mlid_param_asmnts)[names(mlid_param_asmnts)=='IR_Cat']='prelim_asmnt'
print(typeof(mlid_param_asmnts[7,"irid"]))
load("./data/assessed_profs.rdata")
mlid_param_asmnts=assessed_profs$profile_asmnts_mlid_param
mlid_param_asmnts=mlid_param_asmnts[,!names(mlid_param_asmnts) %in% c("IR_Lat","IR_Long","BEN_CLASS","R317Descrp","IR_MLNAME","ASSESS_ID")]
names(mlid_param_asmnts)[names(mlid_param_asmnts)=='IR_Cat']='prelim_asmnt'
print(typeof(mlid_param_asmnts[7,"IR_MLID"]))
gelman_data = read_excel("./data/well_data.xlsx")
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
wells_mlid_param_asmnts$ParameterName="Gelman"
save(wells_mlid_param_asmnts, file = "mlid.rdata")
print(typeof(wells_mlid_param_asmnts[7,"IR_MLID"]))
gelman_data = read_excel("./data/well_data.xlsx")
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
wells_mlid_param_asmnts$ParameterName="Gelman"
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
lapply(wells_mlid_param_asmnts$IR_MLID, as.character)
print(typeof(wells_mlid_param_asmnts[7,"IR_MLID"]))
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
names(unlist(wells_mlid_param_asmnts))
gelman_data = read_excel("./data/well_data.xlsx")
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
names(unlist(wells_mlid_param_asmnts$IR_MLID))
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
unlist(wells_mlid_param_asmnts$IR_MLID)
gelman_data = read_excel("./data/well_data.xlsx")
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
wells_mlid_param_asmnts$ParameterName="Gelman"
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
wells_mlid_param_asmnts$IR_MLID = unlist(wells_mlid_param_asmnts$IR_MLID)
print(typeof(wells_mlid_param_asmnts[7,"IR_MLID"]))
gelman_data = read_excel("./data/well_data.xlsx")
wells_mlid_param_asmnts = gelman_data[,c("Bore")]
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
wells_mlid_param_asmnts$ParameterName="Gelman"
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
wells_mlid_param_asmnts$IR_MLID = unlist(wells_mlid_param_asmnts$IR_MLID)
print(typeof(wells_mlid_param_asmnts[7,"IR_MLID"]))
View(wells_mlid_param_asmnts)
View(wells_mlid_param_asmnts)
gelman_data = read_excel("./data/well_data.xlsx")
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
wells_mlid_param_asmnts$ParameterName="Gelman"
View(mlid_param_asmnts)
print(typeof(mlid_param_asmnts))
View(gelman_data)
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
wells_mlid_param_asmnts$IR_MLID = unlist(wells_mlid_param_asmnts$IR_MLID)
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
wells_mlid_param_asmnts$IR_MLID
unlist(wells_mlid_param_asmnts$IR_MLID)
library(readxl)
typeof(wells_mlid_param_asmnts$IR_MLID)
print(typeof(wells_mlid_param_asmnts[7,"IR_MLID"]))
print(typeof(mlid_param_asmnts$IR_MLID))
View(assessed_profs)
gelman_data = read_excel("./data/well_data.xlsx")
gelman_data = data.frame(gelman_data)
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
wells_mlid_param_asmnts$ParameterName="Gelman"
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
wells_mlid_param_asmnts$IR_MLID
unlist(wells_mlid_param_asmnts$IR_MLID)
typeof(wells_mlid_param_asmnts$IR_MLID)
typeof(wells_mlid_param_asmnts$IR_MLID)
# gelman_data = data.frame(gelman_data)
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts =  data.frame(wells_mlid_param_asmnts)
gelman_data = read_excel("./data/well_data.xlsx")
# gelman_data = data.frame(gelman_data)
wells_mlid_param_asmnts = unique(gelman_data[,c("Bore")])
wells_mlid_param_asmnts =  data.frame(wells_mlid_param_asmnts)
wells_mlid_param_asmnts=plyr::rename(wells_mlid_param_asmnts, c("Bore"="IR_MLID"))
wells_mlid_param_asmnts$ParameterName="Gelman"
# save(wells_mlid_param_asmnts, file = "mlid.rdata")
wells_mlid_param_asmnts$IR_MLID
unlist(wells_mlid_param_asmnts$IR_MLID)
typeof(wells_mlid_param_asmnts$IR_MLID)
typeof(wells_mlid_param_asmnts$IR_MLID)
print(typeof(wells_mlid_param_asmnts[7,"IR_MLID"]))
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
library(shiny); runApp('app2.r')
library(shiny); runApp('app2.r')
runApp('app2.r')
sb <- read.csv(file = './data/all-data.csv')
sb <- read.csv(file = '.data/all-data.csv')
sb <- read.csv(file = "./data/all_data.csv")
head(sb)
wells = unique(sb[, c("WellName", "Date", "Concentration")])
sb <- read.csv(file = "./data/all_data.csv")
head(sb)
wells = unique(sb[, c("WellName", "Date", "Concentration")])
View(wells)
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
View(wells)
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
library(shiny); runApp('app2.r')
library(shiny); runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
library(shiny); runApp('app2.r')
runApp('app2.r')
library(shiny); runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
predict_simple_raw <- read.csv(file = "./data/all_predict_data.csv")
predict_simple = unique(predict_simple_raw[, c("WellName", "Date", "y")])
predict_simple$Date = as.Date(predict_simple$Date, format ='%Y-%m-%d')
predict_simple = data.frame(predict_simple)
View(predict_simple)
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
## run app
shinyApp(ui = ui, server = server)
library(shiny); runApp('app2.r')
runApp('app2.r')
runApp('app2.r')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
library(shiny)
library(ggplot2)
runApp()
install.packages("ggplot2")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
source("common.R")
source("demo.R")
library(shiny)
library(ggplot2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("gifski")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
map_data <- read.csv(file = "./pixel_all.csv")
map_data <- read.csv(file = "./pixel_all.csv")
map_data <- read.csv(file = "./pixel_all.csv")
map_data <- read.csv(file = "pixel_all.csv")
map_data <- read.csv(file = "pixel_all.csv")
map_data <- read.csv(file = "pixel_all.csv")
map_data <- read.csv(file = "./ggif/pixel_all.csv")
map_data <- read.csv(file = "./ggif/pixel_all.csv")
map_data = data.frame(map_data)
View(map_data)
head(map_data)
runApp('ggif')
map_data <- read.csv(file = "./ggif/pixel_all.csv")
map_data = data.frame(map_data)
head(map_data)
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
library(ggplot2)
library(gganimate)
map_data <- read.csv(file = "./ggif/pixel_all.csv")
map_data = data.frame(map_data)
head(map_data)
ggplot(map_data, aes(RowNum, ColNum, size = pop)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum, size = pop)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum, size = pop)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum, size = Conc)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum, size = Conc)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum, size = Conc)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum, size = Conc)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(Date) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum, size = Conc)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(format(Date, "%Y")) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum, size = Conc)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(format(Date, "%Y")) +
ease_aes('linear')
# Here comes the gganimate specific bits
transition_time(format(Date, "%Y")) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum)) +
geom_tile(aes(fill = Conc), colour = "white") +
scale_fill_gradient(low = "#f3da4c", high = "blue", breaks = seq(0, 13, 2)) +
labs(x = "RowNum", y = "ColNum", fill = "Freq of Online Access") +
ggtitle("Peak Hours of Studying Online (Local Time)")
ggplot(map_data, aes(RowNum, ColNum)) +
geom_tile(aes(fill = Conc), colour = "white") +
scale_fill_gradient(low = "#f3da4c", high = "blue", breaks = seq(0, 13, 2)) +
labs(x = "RowNum", y = "ColNum", fill = "Freq of Online Access") +
ggtitle("Peak Hours of Studying Online (Local Time)") +
transition_time(format(Date, "%Y")) +
ease_aes('linear')
ggplot(map_data, aes(RowNum, ColNum)) +
geom_tile(aes(fill = Conc), colour = "white") +
scale_fill_gradient(low = "#f3da4c", high = "blue", breaks = seq(0, 13, 2)) +
labs(x = "RowNum", y = "ColNum", fill = "Freq of Online Access") +
ggtitle("Peak Hours of Studying Online (Local Time)") +
transition_time(format(Date, "%Y")) +
ggplot(map_data, aes(RowNum, ColNum)) +
geom_tile(aes(fill = Conc), colour = "white") +
scale_fill_gradient(low = "#f3da4c", high = "blue", breaks = seq(0, 13, 2)) +
labs(x = "RowNum", y = "ColNum", fill = "Freq of Online Access") +
ggtitle("Peak Hours of Studying Online (Local Time)") +
transition_time(format(Date, "%Y"))
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
runApp('ggif')
